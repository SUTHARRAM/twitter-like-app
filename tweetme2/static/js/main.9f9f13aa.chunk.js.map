{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","responseType","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","og_tweet","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","window","location","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetLists","alert","message","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweets","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","didTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9f9f13aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData; \n  if(data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest(); \n  const url = `http://localhost:8000/api${endpoint}`;  \n  const csrftoken = getCookie('csrftoken');\n  xhr.responseType = \"json\";\n  xhr.open(method, url); \n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  if(csrftoken){\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    xhr.setRequestHeader(\"HTTP_X_REQUEST_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  }\n  xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) {\n    console.log(e)\n    callback({\"message\": \"the request was an error!\"},400)\n  }\n  xhr.send(jsonData);\n\n}\n\n","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n  }\n\nexport function apiTweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport const apiTweetDetail = function(tweetId, callback) {\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n  }\n  \nexport const apiTweetLists = function(username, callback) {\n    let endpoint = \"/tweets/\"\n    if(username){\n      endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n    }","import {apiTweetAction} from './lookup'\nimport React from 'react'\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleActionBackendEvent = (response, status) => {\n      console.log(response)\n      if ((status === 200 || status === 201) && didPerformAction) {\n        didPerformAction(response, status)\n      }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n        \n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}  >{display}</button> \n  }\n","import {ActionBtn} from './buttons'\nimport React ,{useState} from 'react'\n\nexport function ParentTweet(props) {\n    const {tweet} = props\n    return tweet.og_tweet ? <div className='row' >\n                              <div className='col-11 mx-auto p-3 border rounded'>\n                                <p className='mb-0 text-muted small'>Retweet</p>\n                                <Tweet hideActions className={' '}  tweet={tweet.og_tweet} />\n                              </div>\n                            </div> \n                          : null\n  }\n  \n    \nexport function Tweet(props) {\n      const {tweet, didRetweet, hideActions} = props\n      const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n      //console.log(\"This is the tweets props : \",tweet)\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n\n      const path = window.location.pathname\n      var idRegex = /(?<tweetid>\\d+)/\n      const match = path.match(idRegex)\n      const urlTweetId = match ? match.groups.tweetid : -1\n      const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n      const handleLink = (event)=> {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n      }\n  \n      const handlePerformAction = (newActionTweet, status) => {\n        if(status === 200) {\n          setActionTweet(newActionTweet)\n        } else if (status ===201) {\n          // let the tweet list know.\n          if(didRetweet){\n            didRetweet(newActionTweet)\n          }\n        }\n      }\n  \n      return (<div className={className}>\n          <div>\n            <p>{tweet.id} - {tweet.content}</p>\n            <ParentTweet tweet={tweet} />\n          </div>\n  \n        <div className='btn btn-group' >\n\n       {(actionTweet && hideActions !== true ) &&  <React.Fragment>\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display: \"Unlike\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display: \"Retweet\"}} />\n          </React.Fragment>\n       }\n            {isDetail===true ? null : <button className='btn btn-outline-primary button-sm' onClick={handleLink}>View</button>}\n          </div> \n         \n      </div>)\n    }\n    ","import React, {useEffect, useState} from 'react'\nimport {apiTweetLists} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n    }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      // do my lookup\n      if(tweetsDidSet === false){\n      const handleTweetListLookup = (response, status) => {\n        //console.log(response, status)\n        if (status === 200) {\n          setTweetsInit(response)\n          setTweetsDidSet(true)\n        } else {\n          alert(response.message)  \n        }\n      }\n      apiTweetLists(props.username ,handleTweetListLookup)\n    }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n\n    }\n  \n    return tweets.map((item, index)=> {\n      return <Tweet \n              tweet={item} \n              didRetweet = {handleDidRetweet}\n              className='my-5 py-5 border bg-white text-dark' \n              key={`${index}-{item.id}`} />\n    })\n  }","import React from 'react'\n\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweets} = props\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweets(response)\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again!\")\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault() \n    const newVal = textAreaRef.current.value\n\n    // backend api request\n    apiTweetCreate(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className} >\n        <form onSubmit={handleSubmit} >\n          <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n          </textarea>\n          <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n\n        </form>\n  </div>\n}\n","import React, {useState, useEffect} from 'react'\n\nimport {TweetsList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsComponent(props) { \n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true \n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n\n  return (<div className={props.className} >\n         {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n  </div> )\n\n}\n\nexport function TweetDetailComponent(props) {\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    } else {\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n  useEffect(()=>{\n    if (didLookup === false){\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  }, [tweetId, didLookup, setDidLookup])\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n  \n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n        <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponent, TweetDetailComponent } from './tweets';\n\nconst appEl = document.getElementById('root')\n\nif(appEl) {\n  ReactDOM.render(<App />, appEl); \n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById('tweetme-2')\n\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl); \n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container\n  ); \n})\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}