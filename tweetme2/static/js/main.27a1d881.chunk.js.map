{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","responseType","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","apiTweetFeed","nextUrl","undefined","replace","apiTweetLists","username","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","og_tweet","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","message","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweets","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","FeedList","TweetsComponent","setNewTweets","canTweet","didTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.27a1d881.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData; \n  if(data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest(); \n  const url = `http://localhost:8000/api${endpoint}`;  \n  const csrftoken = getCookie('csrftoken');\n  xhr.responseType = \"json\";\n  xhr.open(method, url); \n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  if(csrftoken){\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    //xhr.setRequestHeader(\"HTTP_X_REQUEST_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n  }\n  xhr.onload = function() {\n      if(xhr.status === 403 ){\n        const detail = xhr.response.detail; \n        if(detail === \"Authentication credentials were not provided.\") {\n          if(window.location.href.indexOf('login') === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"            \n          }\n        }\n      }\n      callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) {\n    callback({\"message\": \"the request was an error!\"},400)\n  }\n  xhr.send(jsonData);\n\n}\n\n","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n  }\n\nexport function apiTweetAction(tweetId, action, callback){\n    const data = {id: tweetId, action: action}\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\n}\n\nexport const apiTweetDetail = function(tweetId, callback) {\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n  }\n\nexport function apiTweetFeed(callback, nextUrl) {\n  let endpoint = \"/tweets/feed/\"\n  \n  if (nextUrl !== null && nextUrl !== undefined) {\n    endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n  }\n  backendLookup(\"GET\", endpoint, callback)\n  }\n  \nexport const apiTweetLists = function(username, callback, nextUrl) {\n    let endpoint = \"/tweets/\"\n    if(username){\n      endpoint = `/tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n      endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n    }","import {apiTweetAction} from './lookup'\nimport React from 'react'\n\nexport function ActionBtn(props) {\n    const {tweet, action, didPerformAction} = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleActionBackendEvent = (response, status) => {\n      console.log(response)\n      if ((status === 200 || status === 201) && didPerformAction) {\n        didPerformAction(response, status)\n      }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n        \n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}  >{display}</button> \n  }\n","import React from 'react'\n\nexport function UserLink (props) {\n  const {username} = props\n  const handleUserLink = (event) => {\n    window.location.href = `/profiles/${username}`\n  }\n  return <span className='pointer' onClick={handleUserLink} > \n            {props.children}\n         </span>\n}\n\n\nexport function UserDisplay (props) {\n  const {user, includeFullName} = props\n  const nameDisplay  = includeFullName === true ? `${user.first_name} ${user.last_name}` : null\n\n  return <React.Fragment> \n            {nameDisplay}{' '}\n            <UserLink username={user.username} >@{user.username}</UserLink>\n         </React.Fragment>\n}\n\nexport function UserPicture(props) {\n  const {user} = props\n  return   <UserLink username={user.username}> <span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n              {user.username[0]}\n           </span>\n           </UserLink>\n\n}\n","import React, {useState} from 'react'; \nimport {ActionBtn} from './buttons'\n\nimport {\n  UserDisplay,\n  UserPicture\n} from '../profiles'\n\nexport function ParentTweet(props) {\n    const {tweet} = props\n    return tweet.og_tweet ? <Tweet isRetweet retweeter={props.retweeter} hideActions className={' '}  tweet={tweet.og_tweet} /> : null\n  }\n  \n    \nexport function Tweet(props) {\n      const {tweet, didRetweet, hideActions, isRetweet, retweeter} = props\n      const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n      //console.log(\"This is the tweets props : \",tweet)\n      let className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n      className = isRetweet === true ? `${className} p-2 border rounded` : className\n      const path = window.location.pathname\n      var idRegex = /(?<tweetid>\\d+)/\n      const match = path.match(idRegex)\n      const urlTweetId = match ? match.groups.tweetid : -1\n      const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n      const handleLink = (event)=> {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n      }\n  \n      const handlePerformAction = (newActionTweet, status) => {\n        if(status === 200) {\n          setActionTweet(newActionTweet)\n        } else if (status ===201) {\n          // let the tweet list know.\n          if(didRetweet){\n            didRetweet(newActionTweet)\n          }\n        }\n      }\n  \n      return (<div className={className}>\n       {isRetweet === true && <div className='mb-2'> <span className='small text-muted' >Retweet via <UserDisplay user={retweeter}/> </span>\n        </div>}\n      <div className='d-flex'>\n        <div className=''>\n          <UserPicture user={tweet.user} />\n        \n        </div>\n        <div className='col-11'>\n          <div>\n            <p>\n              <UserDisplay includeFullName user={tweet.user}/>\n            </p>\n            <p>{tweet.content}</p>\n            <ParentTweet tweet={tweet} retweeter={tweet.user} />\n          </div>\n  \n        <div className='btn btn-group px-0' >\n\n       {(actionTweet && hideActions !== true ) &&  <React.Fragment>\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"like\", display:\"Likes\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"unlike\", display: \"Unlike\"}} />\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:\"retweet\", display: \"Retweet\"}} />\n          </React.Fragment>\n       }\n            {isDetail===true ? null : <button className='btn btn-outline-primary button-sm' onClick={handleLink}>View</button>}\n          </div> \n\n          </div>\n         \n      </div>\n      </div>)\n    }\n    ","import React, {useEffect, useState} from 'react'\nimport {apiTweetLists} from './lookup'\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState([null])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n    }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      // do my lookup\n      if(tweetsDidSet === false){\n      const handleTweetListLookup = (response, status) => {\n        //console.log(response, status)\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results)\n          setTweetsDidSet(true)\n        } else {\n          alert(response.message)  \n        }\n      }\n      apiTweetLists(props.username ,handleTweetListLookup)\n    }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n\n    }\n\n    const handleLoadNext = (event) => {\n      event.preventDefault()\n      if(nextUrl !== null) {\n        const handleLoadNextResponse = (response, status) => {\n          if (status === 200) {\n            setNextUrl(response.next)\n            const newTweets = [...tweets].concat(response.results)\n            setTweetsInit(newTweets)\n            setTweets(newTweets)\n          } else {\n            alert(response.message)  \n          }\n        }\n        apiTweetLists(props.username, handleLoadNextResponse, nextUrl)\n      }\n    }\n  \n    return <React.Fragment> {tweets.map((item, index)=> {\n      return <Tweet \n              tweet={item} \n              didRetweet = {handleDidRetweet}\n              className='my-5 py-5 border bg-white text-dark' \n              key={`${index}-{item.id}`} />\n    }) }\n    { nextUrl != null && <button onClick={handleLoadNext} className='btn btn-outline-primary' >Load next</button>}\n    </React.Fragment>\n}","import React from 'react'\n\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetCreate(props){\n  const textAreaRef = React.createRef()\n  const {didTweets} = props\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweets(response)\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again!\")\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault() \n    const newVal = textAreaRef.current.value\n\n    // backend api request\n    apiTweetCreate(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className} >\n        <form onSubmit={handleSubmit} >\n          <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n          </textarea>\n          <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n\n        </form>\n  </div>\n}\n","import React, {useEffect, useState} from 'react'\nimport {apiTweetFeed} from './lookup'\nimport {Tweet} from './detail'\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState([null])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n    }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      // do my lookup\n      if(tweetsDidSet === false){\n      const handleTweetListLookup = (response, status) => {\n        //console.log(response, status)\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results)\n          setTweetsDidSet(true)\n        } \n      }\n      apiTweetFeed(handleTweetListLookup)\n    }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n\n    }\n\n    const handleLoadNext = (event) => {\n      event.preventDefault()\n      if(nextUrl !== null) {\n        const handleLoadNextResponse = (response, status) => {\n          if (status === 200) {\n            setNextUrl(response.next)\n            const newTweets = [...tweets].concat(response.results)\n            setTweetsInit(newTweets)\n            setTweets(newTweets)\n          } \n        }\n        apiTweetFeed(handleLoadNextResponse, nextUrl)\n      }\n    }\n  \n    return <React.Fragment> {tweets.map((item, index)=> {\n      return <Tweet \n              tweet={item} \n              didRetweet = {handleDidRetweet}\n              className='my-5 py-5 border bg-white text-dark' \n              key={`${index}-{item.id}`} />\n    }) }\n    { nextUrl != null && <button onClick={handleLoadNext} className='btn btn-outline-primary' >Load next</button>}\n    </React.Fragment>\n}","import React, {useState, useEffect} from 'react'\n\nimport {TweetsList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {FeedList} from './feed'\nimport {Tweet} from './detail'\n\nexport function FeedComponent(props) { \n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true \n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n\n  return (<div className={props.className} >\n         {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n          <FeedList newTweets={newTweets} {...props} />\n  </div> )\n\n}\n\nexport function TweetsComponent(props) { \n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true \n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n\n  return (<div className={props.className} >\n         {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n          <TweetsList newTweets={newTweets} {...props} />\n  </div> )\n\n}\n\nexport function TweetDetailComponent(props) {\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    } else {\n      alert(\"There was an error finding your tweet.\")\n    }\n  }\n  useEffect(()=>{\n    if (didLookup === false){\n      apiTweetDetail(tweetId, handleBackendLookup)\n      setDidLookup(true)\n    }\n  }, [tweetId, didLookup, setDidLookup])\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n  \n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n        <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {FeedComponent, TweetsComponent, TweetDetailComponent } from './tweets';\n\nconst appEl = document.getElementById('root')\n\nif(appEl) {\n  ReactDOM.render(<App />, appEl); \n}\n\nconst e = React.createElement\nconst tweetsEl = document.getElementById('tweetme-2')\n\nif (tweetsEl) {\n  ReactDOM.render(e(TweetsComponent, tweetsEl.dataset), tweetsEl); \n}\n\nconst tweetFeedEl = document.getElementById('tweetme-2-feed')\n\nif (tweetFeedEl) {\n  ReactDOM.render(e(FeedComponent, tweetFeedEl.dataset), tweetFeedEl); \n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\n\ntweetDetailElements.forEach(container=> {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset),\n    container\n  ); \n})\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}